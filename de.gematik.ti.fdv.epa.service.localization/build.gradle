/*
 * Copyright (c) 2021 gematik GmbH
 * 
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
buildscript {
    dependencies {
        classpath "de.gematik:gematik-parent-plugin:1.3.1"
        classpath "de.gematik:documentation-plugin:1.2.0"
    }
}

configurations {
    asciidoclet
}

apply plugin: "de.gematik.parent"
apply plugin: "de.gematik.publish"
apply plugin: "de.gematik.asciidoctor"
apply plugin: "de.gematik.javadoc"


version = file('version.txt').text.trim()
group = 'de.gematik.ti.fdv'

gematikDocumentation {
    projectShortcut = "ESL"
}

gematikPublish {
    name = "ePA-Service-Localization"
    description = "ePa-Service-Localization library provides functionality start a new DNS lookup, e.g. if previous one ended erroneously to get the " +
            "endpoint URL for a given interface."
    gitHubProjectName = "ref-ePA-Service-Localization"
}

jacoco {
    toolVersion = "0.8.6"
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.destination file("${buildDir}/../../html")
        xml.destination file("${buildDir}/../../dependency-check-report.xml")
    }
}

description = """ePA Service Localization"""

java.sourceCompatibility = JavaVersion.VERSION_1_8
java.targetCompatibility = JavaVersion.VERSION_1_8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {

    implementation group: 'de.gematik.ti.epa', name: 'fdv.service.localization.api', version: '1.0.2'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    implementation group: 'dnsjava', name: 'dnsjava', version: '2.1.9'

    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testImplementation group: 'org.greenrobot', name: 'eventbus', version: '3.1.1'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.0.0'

    testImplementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.8.1'
    testImplementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.1'

}



task sourceJar(type: Jar) {
    archiveClassifier.set("sources")
    dependsOn("javadoc")
    from "${project.buildDir}/../src/main/java/"
    include "**/*.java"
}

task testSourceJar(type: Jar) {
    archiveClassifier.set("test-sources")
    dependsOn("javadoc")
    from "${project.buildDir}/../src/test/java/"
    include "**/*.java"
}

task adocJar(type: Jar) {
    archiveClassifier.set("adoc")
    dependsOn("javadoc")
    from "${project.buildDir}/../doc"
    into "${project.name}"
    exclude "**/generated/**/*.*"

}

task javadocJar(type: Jar) {
    archiveClassifier.set("javadoc")
    dependsOn("javadoc")
    from "${project.buildDir}/docs/javadoc/"
    into "${project.name}"
}

artifacts {
    archives sourceJar
    archives testSourceJar
    archives adocJar
    archives javadocJar
}
