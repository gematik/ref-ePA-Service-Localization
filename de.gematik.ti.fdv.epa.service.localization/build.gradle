/*
 * Copyright (c) 2019 gematik - Gesellschaft f√ºr Telematikanwendungen der Gesundheitskarte mbH
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    dependencies {
        classpath "de.gematik:gematik-parent-plugin:1.0.1"
        classpath "de.gematik:documentation-plugin:1.0.2"
    }
}

apply plugin: "de.gematik.parent"
apply plugin: "de.gematik.asciidoctor"
apply plugin: "de.gematik.javadoc"

group = 'de.gematik.ti.fdv'

description = """ePA Service Localization"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

sourceSets {
    test {
        java.srcDirs = ['src/test/java']
        resources.srcDirs = ['src/test/resources']
        runtimeClasspath = project.sourceSets.main.compileClasspath +
                project.sourceSets.test.compileClasspath +
                fileTree("${buildDir}/resources/test") + fileTree("${buildDir}/resources/main") + fileTree("${buildDir}") +
                project.sourceSets.test.output + project.sourceSets.main.output
    }
}

dependencies {

    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testImplementation group: 'org.greenrobot', name: 'eventbus', version: '3.1.1'
    testImplementation group: 'com.github.tony19', name: 'logback-android', version: '1.3.0-3'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.0.0'
    

    testImplementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.8.1'
    testImplementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.1'

    implementation group: 'de.gematik.ti.fdv', name: 'epa.service.localization.api', version: '1.0.1'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

    implementation group: 'dnsjava', name: 'dnsjava', version: '2.1.9'
}

gematikDocumentation {
    projectShortcut = "ESL"
}

task sourceJar(type: Jar) {
    archiveClassifier.set("sources")
    from "${project.buildDir}/../src/main/java/"
    include "**/*.java"
}
task testSourceJar(type: Jar) {
    archiveClassifier.set("test-sources")
    from "${project.buildDir}/../src/test/java/"
    include "**/*.java"
}
task adocJar(type: Jar) {
    archiveClassifier.set("adoc")
    from "${project.buildDir}/../doc"
    into "${project.name}"
    exclude "**/generated/**/*.*"

}
task javadocJar(type: Jar) {
    archiveClassifier.set("javadoc")
    from "${project.buildDir}/docs/javadoc/"
    into "${project.name}"
}

artifacts {
    archives sourceJar
    archives testSourceJar
    archives adocJar
    archives javadocJar
}

project.publishing.publications {
    sourceJar(MavenPublication) {
        from components.java
        artifact tasks.sourceJar
    }
    adocJar(MavenPublication) {
        from components.java
        artifact tasks.adocJar
    }
    testSourceJar(MavenPublication) {
        from components.java
        artifact tasks.testSourceJar
    }
    pubJavadoc(MavenPublication) {
        from components.java
        artifact tasks.javadocJar
    }
}
test {
    //we want display the following test events
    testLogging {
        events "PASSED", "STARTED", "FAILED", "SKIPPED"
    }
}
